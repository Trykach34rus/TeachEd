services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  redis:
    image: redis:7
    container_name: redis

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}

  backend:
    build:
      context: ./backend
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - rabbitmq

  worker:
    build:
      context: ./worker
    env_file:
      - .env
    depends_on:
      - backend
      - redis
      - rabbitmq

  video-processor:
    build:
      context: ./video-processor
    env_file:
      - .env
    depends_on:
      - backend
      - redis
      - rabbitmq
  
  nginx:
    image: nginx:alpine
    depends_on:
      - backend
      # - frontend
    ports:
      - "80:80"

  frontend:
    build:
      context: ./frontend
  
  minio:
    image: minio/minio:latest
    container_name: minio_dev_s3storage
    command: server --console-address ":${MINIO_PORT_UI}" /data
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}

  createbucket:
    image: minio/mc
    depends_on:
      - minio
    environment:
      MC_HOST_local: http://${MINIO_USER}:${MINIO_PASSWORD}@minio:9000
    entrypoint: >
      /bin/sh -c "
        sleep 5 &&
        mc alias set local "http://minio:${MINIO_PORT_API}" "${MINIO_USER}" "${MINIO_PASSWORD}" && 
        mc mb --ignore-existing local/${MINIO_BUCKET_NAME} || true
      "

volumes:
  postgres_data:
  static_volume:
  frontend_volume:
  minio_data: