import type { PayloadAction } from '@reduxjs/toolkit'
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import axiosInstance from '../../utils/axiosInstance'
import { PostT, UserT } from '../../utils/type'
import { RootState } from '../store'

type HandleRegister = {
	username: string
	password: string | number
	email: string
	first_name: string
	last_name: string
	is_teacher: boolean
}

type HandleLogin = {
	username: string
	password: string
}

interface UserState {
	userInfo: UserT | null
	accessToken: string | null
	loginError: string | null
	registerError: string | null
	userId: number | null
	profile: UserT | null
	profilePosts: PostT[]
	profileLoading: boolean
	profilePostsLoading: boolean
	isMobile: boolean
}

const initialState: UserState = {
	accessToken: null,
	userInfo: null,
	loginError: null,
	registerError: null,
	userId: null,
	profile: null,
	profilePosts: [],
	profileLoading: false,
	profilePostsLoading: false,
	isMobile: false,
}

const handleRegister = createAsyncThunk(
	'user/handleRegister',
	async (data: HandleRegister) => {
		console.log('üîÑ handleRegister: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', { data })
		try {
			const response = await axiosInstance.post('auth/users/', data)
			console.log('‚úÖ handleRegister: —É—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', response.data)
			return response.data
		} catch (error: any) {
			console.error(
				'‚ùå handleRegister: –æ—à–∏–±–∫–∞',
				error.response?.data || error.message
			)
			throw error
		}
	}
)

const handleLogin = createAsyncThunk(
	'user/handleLogin',
	async (data: HandleLogin) => {
		console.log('üîÑ handleLogin: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Ö–æ–¥', { data })
		try {
			const response = await axiosInstance.post('auth/jwt/create/', data)
			console.log('‚úÖ handleLogin: —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥', response.data)
			return response.data
		} catch (error: any) {
			console.error(
				'‚ùå handleLogin: –æ—à–∏–±–∫–∞',
				error.response?.data || error.message
			)
			throw error
		}
	}
)

const getCurrentUser = createAsyncThunk(
	'user/getCurrentUser',
	async (_, { getState }) => {
		const state = getState() as RootState
		console.log('üîÑ getCurrentUser: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
			accessToken: state.user.accessToken,
		})

		try {
			const response = await axiosInstance.get('auth/users/me/', {
				headers: {
					Authorization: `Bearer ${state.user.accessToken}`,
				},
			})
			console.log(
				'‚úÖ getCurrentUser: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã',
				response.data
			)
			return response.data
		} catch (error: any) {
			console.error(
				'‚ùå getCurrentUser: –æ—à–∏–±–∫–∞',
				error.response?.data || error.message
			)
			throw error
		}
	}
)

const getUserById = createAsyncThunk('user/getUserById', async (id: number) => {
	console.log('üîÑ getUserById: –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID', { id })
	try {
		const response = await axiosInstance.get(`auth/users/${id}/`)
		console.log('‚úÖ getUserById: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã', response.data)
		return response.data
	} catch (error: any) {
		console.error(
			'‚ùå getUserById: –æ—à–∏–±–∫–∞',
			error.response?.data || error.message
		)
		throw error
	}
})

export const userSlice = createSlice({
	name: 'user',
	initialState,
	reducers: {
		setUser: (state, action: PayloadAction<UserT>) => {
			state.userInfo = action.payload
		},
		clearToken: state => {
			state.accessToken = null
		},
		setMobile: (state, action: PayloadAction<boolean>) => {
			state.isMobile = action.payload
		},
	},
	extraReducers: builder => {
		builder
			.addCase(handleRegister.fulfilled, state => {
				console.log('‚úÖ handleRegister: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
				state.registerError = null
			})
			.addCase(handleRegister.rejected, (state, action) => {
				console.log('‚ùå handleRegister: –æ—à–∏–±–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏', action.error)
				state.registerError = action.error.message || 'Registration failed'
			})
			.addCase(handleLogin.fulfilled, (state, action) => {
				console.log('‚úÖ handleLogin: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', action.payload)
				state.accessToken = action.payload.accessToken
				state.userInfo = action.payload
				state.loginError = null
			})
			.addCase(handleLogin.rejected, (state, action) => {
				console.log('‚ùå handleLogin: –æ—à–∏–±–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏', action.error)
				state.loginError =
					action.error.message || 'Incorrect username or password'
			})
			.addCase(getCurrentUser.fulfilled, (state, action) => {
				console.log('‚úÖ getCurrentUser: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', action.payload)
				state.userId = action.payload.id
			})
			.addCase(getCurrentUser.rejected, state => {
				console.log('‚ùå getCurrentUser: –æ—à–∏–±–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ - —Ç–æ–∫–µ–Ω –æ—á–∏—â–µ–Ω')
				state.accessToken = null
			})
			.addCase(getUserById.pending, state => {
				console.log('üîÑ getUserById: –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏')
				state.profileLoading = true
			})
			.addCase(getUserById.fulfilled, (state, action) => {
				console.log('‚úÖ getUserById: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', action.payload)
				state.profile = action.payload
				state.profileLoading = false
			})
			.addCase(getUserById.rejected, (state, action) => {
				console.log('‚ùå getUserById: –æ—à–∏–±–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏', action.error)
				state.profileLoading = false
			})
	},
})

export const { setUser, clearToken, setMobile } = userSlice.actions
export { getCurrentUser, getUserById, handleLogin, handleRegister }
export default userSlice.reducer
